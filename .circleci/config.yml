# This config was automatically generated from your source code
# Stacks detected: deps:node:.,test:jest:
version: 2.1
orbs:
  docker: circleci/docker@2.1.3
  node: circleci/node@5
jobs:
  test-node:
    # Install node dependencies and run tests
    executor: node/default
    environment:
      JEST_JUNIT_OUTPUT_DIR: ./test-results/
    steps:
      - checkout
      - node/install-packages:
          pkg-manager: npm
      - run:
          command: npm install jest-junit
      - run:
          name: Run tests
          command: npm run test --ci --runInBand --reporters=default --reporters=jest-junit
      - store_test_results:
          path: ./test-results/
  build-node:
    docker:
      - image: cimg/node:18-alpine
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build docker image
          command:
            docker build -t $DOCKER_IMAGE:latest .
      - run:
          name: Connect to Docker Hub
          command:
            echo "$DOCKER_HUB_PASSWORD" | docker login -u "$DOCKER_HUB_USER_ID" --password-stdin
      - run:
          name: Push docker image
          command:
            docker tag $DOCKER_IMAGE $DOCKER_IMAGE |
            docker push $DOCKER_IMAGE
  deploy:
    # This is an example deploy job, not actually used by the workflow
    docker:
      - image: cimg/base:stable
    steps:
      # Replace this with steps to deploy to users
      - run:
          name: deploy
          command: '#e.g. ./deploy.sh'
  deploy-from-dockerhub-to-render:
    docker:
      - image: curlimages/curl:latest
    steps:
      - run:
          name: Deploy docker hub image to Render
          command: curl $DEPLOY_HOOK
workflows:
  build-and-test:
    jobs:
      - test-node
      - build-node:
          filters:
                branches:
                  only: circleci
          requires:
            - test-node
      - deploy-from-dockerhub-to-render:
          filters:
            branches:
              only: circleci
          requires:
            - build-node
    # - deploy:
    #     requires:
    #       - build-node